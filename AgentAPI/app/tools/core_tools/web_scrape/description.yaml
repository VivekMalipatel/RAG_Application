web_scrape_tool: |
  Extract detailed, structured information from specific websites using AI-powered scraping. Perfect for getting in-depth data after discovering relevant URLs with web search.

  WHEN TO USE:
  - Extract specific product details, prices, specifications from e-commerce sites
  - Get detailed content from articles, blogs, or documentation pages
  - Scrape structured data like tables, lists, or contact information
  - Extract information that requires understanding page context and layout
  - Follow up on URLs found through web search to get comprehensive details

  CORE CAPABILITIES:
  - Single URL scraping: Deep extraction from one specific webpage
  - Multi-URL scraping: Extract same type of data from multiple similar pages
  - Handles JavaScript-heavy sites and dynamic content
  - AI-powered understanding of page structure and content
  - Returns clean, structured data based on your instructions

  EXTRACTION PROMPT BEST PRACTICES:

  **Be Specific About What You Want:**
  ✅ Good: "Extract product name, price, available sizes, and customer rating"
  ❌ Bad: "Get product information"

  **Specify Output Format:**
  ✅ Good: "List each shoe with: Name, Price (include currency), Available Sizes"
  ❌ Bad: "Find shoes and prices"

  **Include Context for Complex Pages:**
  ✅ Good: "From the product catalog section, extract each item's title, price, and discount percentage if available"
  ❌ Bad: "Get all products"

  EFFECTIVE EXTRACTION PROMPTS BY USE CASE:

  **Product Information:**
  "Extract product name, current price, original price if on sale, available sizes/colors, and stock status"

  **Contact Details:**
  "Find all contact information including phone numbers, email addresses, physical address, and business hours"

  **Article Content:**
  "Extract the main article title, author, publication date, and full article text content"

  **Service Listings:**
  "List all services offered with their names, descriptions, and pricing if mentioned"

  **Job Postings:**
  "Extract job title, company name, location, salary range, and key requirements for each listing"

  **Event Information:**
  "Get event name, date, time, location, ticket prices, and brief description"

  MULTI-SITE SCRAPING:
  - Use when you need the same type of data from multiple similar pages
  - Perfect for comparing prices across different retailers
  - Ideal for gathering data from multiple product pages or locations
  - Example: Extract pricing from Nike US, UK, and AU sites using same prompt

  PARAMETERS:
  - url: Single website to scrape (for focused extraction)
  - urls: List of websites to scrape (for comparison or bulk extraction)
  - extraction_prompt: Clear, specific instructions for what to extract

  OUTPUT FORMAT:
  - Returns structured JSON with extracted data
  - Includes error messages for failed extractions
  - Provides clean, formatted results ready for analysis
  - Maintains data relationships and context

  ERROR HANDLING:
  - Graceful handling of blocked or unavailable sites
  - Timeout management for slow-loading pages
  - Clear error messages when extraction fails
  - Fallback strategies for partially accessible content

  INTEGRATION WITH WEB SEARCH:
  1. Use web_search_tool to find relevant URLs
  2. Use web_scrape_tool to extract detailed information from those URLs
  3. Perfect for building comprehensive, well-sourced responses

  PERFORMANCE TIPS:
  - Single URL scraping: 5-15 seconds per page
  - Multi-URL scraping: Processes multiple URLs concurrently
  - JavaScript-heavy sites may take longer but are fully supported
  - Best results on publicly accessible pages

  LIMITATIONS:
  - Cannot access password-protected or login-required content
  - Some sites may block automated access
  - Very complex or poorly structured sites may return incomplete data
  - Respects robots.txt and rate limiting

  Perfect companion to web_search_tool: First search for sources, then scrape for detailed extraction.



