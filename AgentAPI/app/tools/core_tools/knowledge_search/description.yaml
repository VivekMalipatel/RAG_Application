knowledge_search_tool: |
    Execute intelligent Cypher queries against the enterprise knowledge graph database to retrieve relevant information with mandatory security filtering and performance optimization. This tool serves as the direct interface to the knowledge graph, enabling precise information discovery across multi-modal content.

    #Primary Capabilities#
    - **Multi-Modal Search**: Query across unstructured documents (PDFs, images, text), structured data (CSV, Excel), entities, and relationships
    - **Vector Similarity Search**: Semantic search using embeddings for context-aware information retrieval
    - **Text-Based Filtering**: Precise metadata and content filtering using string matching operations
    - **Relationship Analysis**: Discover and analyze connections between entities, documents, and data points
    - **Progressive Discovery**: Support for breadth-first exploration and depth-first detailed analysis

    #Security & Performance Framework#
    
    **MANDATORY Security Requirements**
    - ALL queries MUST include $user_id and $org_id parameters for data isolation
    - Queries without both security parameters will be automatically rejected
    - Parameters are automatically injected from authenticated user session context
    - Use dollar sign syntax ($param) exclusively - NEVER use curly braces ({param})
    - Built-in security scanning prevents dangerous operations (APOC, LOAD CSV, DB procedures)

    **Performance Optimization**
    - **CRITICAL**: EVERY query MUST include LIMIT clause - queries without LIMIT will fail
    - **MAXIMUM LIMIT**: Never exceed 150 results unless absolutely essential
    - **Content-Aware Limiting**:
      * Unstructured documents: Maximum 4 Page nodes (contain images and rich content)
      * Structured data: Up to 150 RowValue/Column records (text-only data)
      * Entity searches: 10-20 entities based on profile length and complexity
      * Relationship searches: 5-10 relationships with full profile data
    - Automatic query validation and syntax correction for optimal performance

    #Knowledge Graph Schema#

    **Node Types & Key Properties**
    - **Document**: user_id, org_id, s3_url, source, filename, file_type, category, internal_object_id, task_id, metadata_*
    - **Page**: user_id, org_id, page_number, content (JSON), image_s3_url, sheet_name, summary, total_rows, total_columns, is_tabular, embedding
    - **Entity**: user_id, org_id, id, text, entity_type, entity_profile, embedding
    - **Column**: user_id, org_id, column_name, column_profile, embedding
    - **RowValue**: user_id, org_id, row_index, column_name, value
    - **RELATIONSHIP**: user_id, org_id, relation_type, relation_profile, embedding

    **Relationship Structure**
    - Document -[:HAS_PAGE]-> Page (Document contains multiple pages)
    - Page -[:MENTIONS]-> Entity (Page references entities)
    - Page -[:MENTIONS]-> Column (Page references structured data columns)
    - Column -[:HAS_VALUE]-> RowValue (Column contains data values)
    - Entity -[:RELATIONSHIP]-> Entity (Entity connections and relationships)
    - RowValue -[:RELATES_TO]-> RowValue (Data value relationships)

    #Vector Search Implementation#
    
    **Embedding Support**
    - Use $embedding parameter in queries for semantic similarity search
    - Provide text_to_embed parameter to automatically generate embeddings via OpenAI API
    - Available vector indices: page_embedding_index, entity_embedding_index, relationship_embedding_index
    - Combine vector similarity with metadata filtering for precision results
    #Query Pattern Examples#

    **1. Semantic Vector Search on Page Content**
    ```
    CALL db.index.vector.queryNodes('page_embedding_index', 5, $embedding)
    YIELD node, score
    WHERE node.user_id = $user_id AND node.org_id = $org_id
    RETURN node.page_number, node.content, node.image_s3_url, score
    LIMIT 4
    ```

    **2. Entity Relationship Discovery**
    ```
    MATCH (e1:Entity {user_id: $user_id, org_id: $org_id})-[r:RELATIONSHIP]->(e2:Entity)
    WHERE e1.entity_type = $entity_type
    RETURN e1.text, e1.entity_profile, r.relation_type, r.relation_profile, e2.text, e2.entity_profile
    LIMIT 10
    ```

    **3. Document Metadata Search**
    ```
    MATCH (d:Document {user_id: $user_id, org_id: $org_id})
    WHERE d.filename CONTAINS $search_term OR d.category = $category
    RETURN d.filename, d.file_type, d.category, d.source, d.s3_url
    LIMIT 20
    ```

    **4. Structured Data Analysis**
    ```
    MATCH (c:Column {user_id: $user_id, org_id: $org_id})-[:HAS_VALUE]->(r:RowValue)
    WHERE c.column_name CONTAINS $column_name
    RETURN c.column_name, c.column_profile, collect(r.value) as sample_values
    LIMIT 20
    ```

    **5. Multi-Modal Content Discovery**
    ```
    MATCH (p:Page {user_id: $user_id, org_id: $org_id})-[:MENTIONS]->(e:Entity)
    WHERE p.page_number = $page_number
    RETURN p.page_number, p.content, p.image_s3_url, 
           collect(e.text) as mentioned_entities, collect(e.entity_type) as entity_types
    LIMIT 5
    ```

    **6. Deep Relationship Traversal**
    ```
    MATCH path = (e1:Entity {user_id: $user_id, org_id: $org_id})-[:RELATIONSHIP*1..3]->(e2:Entity)
    WHERE e1.text = $entity_text
    RETURN [node in nodes(path) | node.text] as entity_path,
           [rel in relationships(path) | rel.relation_type] as relationship_types
    LIMIT 5
    ```

    #Critical Usage Guidelines#

    **NEVER Retrieve**
    - .embedding properties from any node type (Page.embedding, Entity.embedding, Column.embedding, RELATIONSHIP.embedding)
    - Complete node objects without specifying required properties
    - System-generated internal IDs or debugging information
    - Raw technical metadata or infrastructure details

    **ALWAYS Include**
    - Security filtering parameters ($user_id, $org_id) in every single query
    - LIMIT clauses appropriate to content type and performance requirements
    - Specific property names in RETURN statements for optimal performance
    - Proper parameter validation before query execution

    **Best Practices**
    - Start with broader discovery queries, then narrow down to specific details
    - Combine text-based filtering with vector similarity for optimal precision
    - Use appropriate limits based on content type (4 for pages, 150 for structured data)
    - Leverage relationship traversal for comprehensive information discovery
    - Monitor query performance and adjust limits accordingly

    This tool enables sophisticated knowledge discovery while maintaining enterprise-grade security, performance, and reliability standards.