search_documents: |
  Find documents in the knowledge graph using flexible filters on filename, file type, category, and source. Supports partial matching on filenames for fuzzy search. Returns document metadata including IDs, paths, and categories.
  
  Use this when:
  - User asks to "find documents about X"
  - Need to discover available documents
  - Filtering by file type (pdf, csv, jpeg, etc.)
  - Searching by source system
  
  Returns: List of documents with properties (internal_object_id, filename, file_type, category, source, s3_url, task_id)

get_document_details: |
  Get complete information about a specific document including page count and entity count. Use this after finding a document to get comprehensive details.
  
  Use this when:
  - User asks for details about a specific document
  - Need to know how many pages or entities are in a document
  - Want complete document metadata
  
  Returns: Full document node + page_count + entity_count

search_pages_by_content: |
  Semantic vector search across page content using natural language queries. Automatically converts your query text to embeddings and finds similar pages. Returns pages with similarity scores ranked by relevance.
  
  Use this when:
  - User asks "find pages about X"
  - Semantic/conceptual search needed
  - Looking for similar content across documents
  - Content-based discovery
  
  Returns: Pages with content + similarity scores

search_pages_in_document: |
  Get all pages from a specific document with optional filters for page number or tabular/non-tabular pages.
  
  Use this when:
  - User wants to see all pages in a document
  - Need to filter for specific page numbers
  - Looking for tabular vs non-tabular content
  
  Returns: List of pages ordered by page_number

get_page_details: |
  Get full page content including all entities mentioned on that page. Retrieves both the page content and all entities extracted from it.
  
  Use this when:
  - User wants to see specific page content
  - Need to know what entities are on a page
  - Drilling down into page-level details
  
  Returns: Page content + list of all entities mentioned

search_entities_by_semantic: |
  Vector similarity search on entity embeddings using natural language queries. Finds entities that are semantically similar to the query with optional type filtering.
  
  Use this when:
  - User asks to "find entities related to X"
  - Semantic search for concepts or topics
  - Looking for similar entities
  - Can filter by entity_type (person, organization, protocol, etc.)
  
  Returns: Entities with similarity scores

search_entities_by_type: |
  List all entities of a specific type. Direct lookup for entity classification.
  
  Use this when:
  - User asks for "all persons" or "all organizations"
  - Need entities of specific type
  - Type-based filtering
  
  Returns: Entities matching the specified type

search_entities_by_text: |
  Keyword/partial text search on entity text field using CONTAINS matching. Supports fuzzy matching for misspellings.
  
  Use this when:
  - User provides specific entity name or text
  - Keyword-based search
  - Looking for entities containing specific text
  - Can filter by entity_type
  
  Returns: Matching entities

get_entity_details: |
  Get complete entity information plus all pages where it's mentioned. Shows entity context across the document.
  
  Use this when:
  - User asks "where is this entity mentioned?"
  - Need entity profile and occurrences
  - Understanding entity context
  
  Returns: Entity + list of pages mentioning it

find_entity_relationships: |
  Get all relationships connected to an entity with direction control (outgoing, incoming, or both). Shows how entities are connected.
  
  Use this when:
  - User asks "what is X related to?"
  - Need to see entity connections
  - Understanding entity graph neighborhood
  - Direction parameter: 'outgoing', 'incoming', or 'both'
  
  Returns: Entity + list of relationships with connected entities

search_relationships_by_type: |
  Find relationships of a specific type across all entities. Discovers relationship patterns.
  
  Use this when:
  - User asks for relationships of specific type
  - Looking for patterns in connections
  - Type-based relationship filtering
  
  Returns: Source entity + relationship + target entity for each match

search_relationships_semantic: |
  Vector search on relationship embeddings to find semantically similar relationships. Discovers conceptually similar connections.
  
  Use this when:
  - User describes a relationship concept
  - Semantic search on relationship meanings
  - Finding similar relationship types
  
  Returns: Source + relationship + target + similarity scores

traverse_entity_graph: |
  Multi-hop graph traversal from a starting entity (1-3 hops). Explores entity neighborhood and discovers connected subgraphs.
  
  Use this when:
  - User wants to explore entity connections
  - Need multi-hop relationship discovery
  - Understanding broader entity context
  - max_hops: 1, 2, or 3 (default 2)
  
  Returns: Starting entity + connected entities + relationships in path

search_columns: |
  Find columns by name or semantic profile with hybrid search support. Searches both column names and column profiles (descriptions).
  
  Use this when:
  - User asks about table columns
  - Looking for specific data fields
  - Semantic search on column meanings
  - Can filter by document_id
  
  Returns: Column nodes with names and profiles

get_column_values: |
  Get all row values for a specific column in a document. Retrieves the actual data from structured tables.
  
  Use this when:
  - User wants to see column data
  - Need actual values from a column
  - Exploring tabular content
  
  Returns: Column + row values ordered by row_index

search_row_values: |
  Search for specific values in row data across columns. Finds cells matching a pattern.
  
  Use this when:
  - User searches for specific data values
  - Looking for cells containing text
  - Can filter by column_name or document_id
  
  Returns: RowValue nodes matching the pattern

query_tabular_data: |
  Navigate full tabular structure (Page -> Column -> RowValue -> RELATES_TO). Comprehensive access to structured spreadsheet data.
  
  Use this when:
  - User wants to query table data
  - Need structured data with relationships
  - Exploring spreadsheet content
  - Can filter by sheet_name or row_index
  
  Returns: Pages + columns + row values + related values

hybrid_search: |
  Combine vector similarity + keyword + graph traversal across multiple node types. Most comprehensive search strategy.
  
  Use this when:
  - User has complex or ambiguous query
  - Need results from multiple sources
  - Comprehensive knowledge retrieval
  - search_nodes: List of ['Page', 'Entity', 'Column']
  - include_relationships: bool to expand to connected nodes
  
  Returns: Mixed results from pages, entities, and columns with scores

breadth_first_search: |
  BFS traversal from a starting node with configurable depth and relationship filtering. Systematic graph exploration.
  
  Use this when:
  - User wants to explore graph structure
  - Need systematic neighborhood discovery
  - Understanding document/page/entity connections
  - start_node_type: 'Document', 'Page', or 'Entity'
  - max_depth: 1-3 hops
  - Can filter by relationship_types
  
  Returns: Starting node + connected nodes + depth + paths

get_entity_context: |
  Get entity with full surrounding context using GraphRAG pattern. Retrieves entity with pages, related entities, and document in one query.
  
  Use this when:
  - User needs complete entity picture
  - GraphRAG-style context retrieval
  - Comprehensive entity understanding
  - Configurable: include_pages, include_related_entities, include_document
  
  Returns: Entity + pages + related entities + document context

execute_raw_cypher_query: |
  Execute a custom Cypher query against the knowledge graph with optional parameters. Provides maximum flexibility for advanced graph exploration.
  
  Use this when:
  - A bespoke query is required beyond the predefined tools
  - Inspecting or debugging graph structures
  - Retrieving complex projections from the graph
  - The Cypher already includes user_id and org_id filters in the query text
  
  Returns: Records returned by the Cypher query with embeddings removed. Queries missing user_id or org_id constraints will be rejected.