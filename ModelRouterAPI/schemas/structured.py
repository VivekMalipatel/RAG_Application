from typing import Dict, Any, Union, List, Optional, Type
from pydantic import BaseModel, Field

class StructuredOutputRequest(BaseModel):
    model: str = Field(..., description="Model to use for generation")
    prompt: str = Field(..., description="Text prompt for the model")
    schema: Dict[str, Any] = Field(..., description="Pydantic schema definition as a JSON schema")
    max_tokens: Optional[int] = Field(None, description="Maximum tokens to generate")
    temperature: Optional[float] = Field(0.7, description="Sampling temperature")
    top_p: Optional[float] = Field(0.9, description="Nucleus sampling parameter")
    system_prompt: Optional[str] = Field(
        None, 
        description="Optional system prompt to override the default"
    )

class StructuredOutputResponse(BaseModel):
    model: str = Field(..., description="Model used for generation")
    output: Dict[str, Any] = Field(..., description="Structured output generated by the model")
    prompt_tokens: Optional[int] = Field(None, description="Number of tokens in the prompt")
    completion_tokens: Optional[int] = Field(None, description="Number of tokens in the completion")
    total_tokens: Optional[int] = Field(None, description="Total number of tokens used")